--git
-
添加.gitignore文件
/**/.idea/
/**/.mvn/
/**/target/
/**/*.iml
/**/node_modules/
/**/dist/
git init
git add .
git commit -m 'init'
git remote add origin git@gitee.com:hlf890112/intelligent-dispensing.git
-若远程仓库里有文件（如README.md），要先把远程仓库里的文件pull下来
git pull origin master --allow-unrelated-histories
git push -u origin master
-强行让本地分支覆盖远程分支
git push origin master -f
-多个分支再git pull

-
git clone https://gitee.com/hlf890112/intelligent-dispensing.git

-
git reflog
q退出
git reset --hard 40a9a83

-查看本地仓库分支
git branch
-查看远程仓库分支
git branch -r
-查看本地仓库分支和远程仓库分支
git branch -a
-根据远程仓库的fa分支创建一个本地仓库的fa分支，创建完成之后不切换
git branch fa origin/fa
-切换到fa分支
git checkout fa
-根据远程仓库的fa分支创建一个本地仓库的fa分支，创建完成之后进行切换
git checkout -b fa origin/fa
-根据远程仓库的fa分支创建一个本地仓库的fa分支
git checkout -t origin/fa


--maven
-环境变量
M2_HOME

-Path
%M2_HOME%\bin

mvn -v

-配置文件setting.xml
<localRepository>D:/apache/maven</localRepository>

<offline>true</offline>

<mirror>
   <id>nexus-aliyun</id>
   <mirrorOf>central</mirrorOf>
   <name>Nexus aliyun</name>
   <url>http://maven.aliyun.com/nexus/content/groups/public</url>
</mirror>
<mirror>
   <id>central</id>
   <mirrorOf>*</mirrorOf>
   <name>central</name>
   <url>file://D:\apache\maven</url>
</mirror>

-添加jar到本地仓库
mvn install:install-file -Dfile=D:\ojdbc14.jar -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar

-引入外部jar包
<dependency>
	<groupId>com.wubin</groupId>
	<artifactId>taobao</artifactId>
	<version>1.0</version>
	<scope>system</scope>
	<systemPath>${basedir}/lib/taobao-sdk-java-auto_1479188381469-20190523.jar</systemPath>
</dependency>

<plugin>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-maven-plugin</artifactId>
	<configuration>
		<includeSystemScope>true</includeSystemScope>
	</configuration>
</plugin>


--gradle
-环境变量
GRADLE_HOME		=E:\gradle-5.6.4
GRADLE_USER_HOME	=D:\repository\gradle
gradle -v
gradle init
gradle run

distributionUrl=https\://services.gradle.org/distributions/gradle-5.6.4-bin.zip
distributionUrl=file\:/D:/tools/gradle-5.6.4-bin.zip
gradlew run

maven { url 'https://maven.aliyun.com/repository/public/' }
compile files('lib/ojdbc-14.jar')
compile fileTree(dir: 'libs', include: ['*.jar'])


--android cmdline-tools
-ANDROID_SDK_HOME
.android文件夹位置
-
sdkmanager --help --sdk_root=D:\Android\rn\sdk
sdkmanager --version --sdk_root=D:\Android\rn\sdk
sdkmanager --list --sdk_root=D:\Android\rn\sdk
sdkmanager --list_installed --sdk_root=D:\Android\rn\sdk
sdkmanager "platforms;android-28" --sdk_root=D:\Android\rn\sdk
sdkmanager --install "ndk;20.1.5948944" --sdk_root=D:\Android\rn\sdk
sdkmanager --uninstall "platforms;android-28" --sdk_root=D:\Android\rn\sdk
-
cmdline-tools/latest/bin/...
cmdline-tools/latest/lib/...
cmdline-tools/latest/NOTICE.txt
cmdline-tools/latest/source.properties


--spring-boot-cli
-配置环境变量
spring --version
spring --help init
-创建项目
d:
cd D:\project\java\springboot2
spring init --build=maven --language=java --boot-version=2.1.5.RELEASE --groupId=com.rmyy --artifactId=print --version=0.0.1-SNAPSHOT --name=print --packaging=jar --java-version=1.8 --dependencies=web print


--
myapp.xml
myapp.exe install
myapp.exe start


--RocketMQ
-配置 ROCKETMQ_HOME 环境变量
-修改 bin\runserver.cmd
set "JAVA_OPT=%JAVA_OPT% -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"
-->
rem set "JAVA_OPT=%JAVA_OPT% -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"
set "JAVA_OPT=%JAVA_OPT% -server -Xms256m -Xmx512m"

-启动NameServer，日志在 用户\logs\rocketmqlogs 下
start mqnamesrv.cmd
或双击 mqnamesrv.cmd

-修改 bin\runbroker.cmd
set "JAVA_OPT=%JAVA_OPT% -server -Xms2g -Xmx2g -Xmn1g"
-->
rem set "JAVA_OPT=%JAVA_OPT% -server -Xms2g -Xmx2g -Xmn1g"
set "JAVA_OPT=%JAVA_OPT% -server -Xms256m -Xmx512m"

-启动Broker，日志在 用户\logs\rocketmqlogs 下
start mqbroker.cmd -n localhost:9876 autoCreateTopicEnable=true
或修改 mqbroker.cmd
在 call "%ROCKETMQ_HOME%\bin\runbroker.cmd" org.apache.rocketmq.broker.BrokerStartup %* 之前添加
set "NAMESRV_ADDR=localhost:9876"
双击 mqbroker.cmd

-启动消费者
set NAMESRV_ADDR=localhost:9876
tools.cmd org.apache.rocketmq.example.quickstart.Consumer
-启动生产者
set NAMESRV_ADDR=localhost:9876
tools.cmd org.apache.rocketmq.example.quickstart.Producer
-关闭服务
mqshutdown.cmd broker
mqshutdown.cmd namesrv


--kafka
-修改 config\zookeeper.properties
dataDir=D:/apache/kafka/tmp/zookeeper
-修改 config\server.properties
log.dirs=D:/apache/kafka/tmp/kafka-logs
-启动自带 zookeeper 服务
bin\windows\zookeeper-server-start.bat config\zookeeper.properties
-启动 kafka 服务
bin\windows\kafka-server-start.bat config\server.properties
-创建 topic
kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test
-查看 topic
kafka-topics.bat --list --zookeeper localhost:2181
-启动生产者
kafka-console-producer.bat --broker-list localhost:9092 --topic test
-启动消费者
kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test --from-beginning


--RabbitMQ
-启动监控管理
rabbitmq-plugins enable rabbitmq_management
重启rabbitmq服务
http://localhost:15672
用户名guest
密码guest


--ActiveMQ
http://localhost:8161/
用户名admin
密码admin
-启动服务
双击activemq.bat


--emqx
http://localhost:18083/
用户名admin
密码public
-启动服务
emqx start
-关闭服务
emqx stop


--zookeeper
-拷贝 conf/zoo_sample.cfg，重命名为 zoo.cfg
dataDir=D:\apache/zookeeper/data
dataLogDir=D:\apache/zookeeper/log
-启动服务
zkServer.cmd
-启动客户端
zkCli.cmd
-启动第三方客户端
java -jar zookeeper-dev-ZooInspector.jar


--mongodb
-新建 mongod.cfg
systemLog:
  destination: file
  path: D:\db\mongodb\mongodb-win32-x86_64-2012plus-4.2.0\log\mongodb.log
  logAppend: true
storage:
  dbPath: D:\db\mongodb\mongodb-win32-x86_64-2012plus-4.2.0\data\
  journal:
    enabled: true
net:
  bindIp: 127.0.0.1
  port: 27017
-启动服务
mongod --config D:\db\mongodb\mongodb-win32-x86_64-2012plus-4.2.0\bin\mongod.cfg


--solr
在solr-7.7.2/server/solr目录下新建new_core文件夹
将solr-7.7.2/server/solr/configsets/_default目录下的conf文件夹拷贝到new_core下

cd到solr-7.7.2\bin
solr create -c mycollection

-ik分词器
<dependency>
    <groupId>com.github.magese</groupId>
    <artifactId>ik-analyzer</artifactId>
    <version>8.3.0</version>
</dependency>

将jar包放入solr-7.7.2/server/solr-webapp/webapp/WEB-INF/lib目录下

配置solr-7.7.2/server/solr/mycollection/conf目录下managed-schema文件
	<!-- ik分词器 -->
	<fieldType name="text_ik" class="solr.TextField">
	  <analyzer type="index">
		<tokenizer class="org.wltea.analyzer.lucene.IKTokenizerFactory" useSmart="false" conf="ik.conf"/>
		<filter class="solr.LowerCaseFilterFactory"/>
	  </analyzer>
	  <analyzer type="query">
		<tokenizer class="org.wltea.analyzer.lucene.IKTokenizerFactory" useSmart="true" conf="ik.conf"/>
		<filter class="solr.LowerCaseFilterFactory"/>
	  </analyzer>
	</fieldType>

-dataimport
将solr-7.7.2\dist目录下solr-dataimporthandler-7.7.2.jar和solr-dataimporthandler-extras-7.7.2.jar，复制到solr-7.7.2\server\solr-webapp\webapp\WEB-INF\lib目录下

将mysql-connector-java-5.1.46.jar复制到solr-7.7.2\server\solr-webapp\webapp\WEB-INF\lib目录下

配置solr-7.7.2/server/solr/mycollection/conf目录下solrconfig.xml文件
  <!-- 数据库配置 -->
  <requestHandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler"> 
	<lst name="defaults">  
	  <str name="config">data-config.xml</str>  
	</lst>  
  </requestHandler>

在solr-7.7.2\server\solr\corename\conf目录下新建data-config.xml文件
<?xml version="1.0" encoding="UTF-8"?>
<dataConfig>
    <dataSource driver="com.mysql.jdbc.Driver"
				url="jdbc:mysql://localhost:3306/test?useSSL=false"
				user="root"
				password="root"/>
    <document>
        <entity name="user" pk="id"
				query="select * from tb_user"
				deltaImportQuery="select * from tb_user where id = '${dataimporter.delta.id}'"
				deltaQuery="select id from tb_user where create_time > '${dataimporter.last_index_time}'">
            <field column="id" name="id"/>
            <field column="username" name="user_username"/>
            <field column="password" name="user_password"/>
            <field column="create_time" name="user_create_time"/>
        </entity>
    </document>
</dataConfig>

配置solr-7.7.2/server/solr/mycollection/conf目录下managed-schema文件
    <field name="user_username" type="string" indexed="true" stored="true"/>
    <field name="user_password" type="string" indexed="true" stored="true"/>
    <field name="user_create_time" type="pdate" indexed="true" stored="true"/>

-删除
<delete><id>1</id></delete>
<commit/>

<delete><query>id:1</query></delete>
<commit/>

<delete><query>*:*</query></delete>
<commit/>


--netcat
-下载地址
https://eternallybored.org/misc/netcat/

nc -v 114.115.204.60 21012
{"REQ":"Hello","CID":"898607B8101980081125","Shake":0,"Fall":0}
{"REQ":"Hello","CID":"898607B8101980081125","Shake":1,"Fall":1}

-扫描端口
nc -z -v 123.157.138.86 3306
nc -z -v 114.115.204.60 21008-21020


--curl
-下载地址
https://curl.se/

curl www.baidu.com -i


--fiddler
-下载地址
https://www.telerik.com/fiddler/fiddler-classic
https://www.telerik.com/fiddler/add-ons
CertMaker for iOS and Android

openssl x509 -inform DER -in FiddlerRoot.cer -out cacert.pem
openssl x509 -inform PEM -subject_hash_old -in cacert.pem
mv cacert.pem e5c3944b.0

openssl x509 -inform DER -in C:\Users\DELL\Desktop\FiddlerRoot.cer -out C:\Users\DELL\Desktop\FiddlerRoot.pem
openssl x509 -inform PEM -subject_hash_old -in C:\Users\DELL\Desktop\FiddlerRoot.pem
ren C:\Users\DELL\Desktop\FiddlerRoot.pem 269953fb.0


--ffmpeg
-格式转换
ffmpeg.exe -i C:\tools\video\012715-793-carib.rmvb C:\tools\video\test.mp4

ffmpeg.exe -f image2 -i D:\test\test1\%03d.jpg -vcodec libx264 -r 1 test.mp4

ffmpeg.exe -i 0.mp4 -f gif 00.gif

ffmpeg -i https://videomy.yongaomy.com/20211017/CxMO3WwJ/index.m3u8 D:\test\b.mp4

ffmpeg -i "concat:D:\test\m3u8\Downloads\1.ts|D:\test\m3u8\Downloads\2.ts|" -c copy D:\test\m3u8\Downloads\3.ts
ffmpeg -f concat -safe 0 -i D:\test\m3u8\Downloads\京香julia\6\filelist.txt -c copy D:\test\m3u8\Downloads\京香julia\6\output.mp4

-播放
ffplay.exe -i D:\test\camera\051113-335-carib.rmvb
ffplay.exe -i D:\test\camera\012715-793-carib.rmvb -vf setpts=PTS/8 -af atempo=2
ffplay.exe -i D:\test\m3u8\Downloads\yapmMlVcRxNZHk8G.ts

--rtmp
nginx.exe -c conf\nginx-win-rtmp.conf

ffmpeg.exe -re -i C:\doa\video.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/myapp/test
ffplay.exe rtmp://localhost:1935/myapp/test
ffplay.exe -i rtmp://localhost:1935/myapp/test -fflags nobuffer


--tesseract
tesseract源码下载：https://github.com/tesseract-ocr/tesseract
tesseract安装包下载：https://digi.bib.uni-mannheim.de/tesseract
tesseract语言包下载：https://github.com/tesseract-ocr/tessdata
jTessBoxEditor下载：https://sourceforge.net/projects/vietocr/files/jTessBoxEditor

tesseract --version
tesseract --list-langs
-cmd输出
tesseract D:\test\en.jpg stdout
-文件输出
tesseract D:\test\en.jpg result
-数字
tesseract D:\test\en.jpg stdout digits
-中文
tesseract D:\test\ch.png stdout -l chi_sim
tesseract D:\wubin\个人\微信图片_20200302084302.jpg stdout -l chi_sim
tesseract D:\test\num.png stdout -l chi_sim --psm 6


--
WMIC
Product list

rem SQL Server 2019 Database Engine Shared
msiexec /x {DE5B7937-D5B5-4157-BC30-BB87F021CFF0}


--
cmd /k "cd /d E:\tools\putty&&java -jar xxx.jar"























